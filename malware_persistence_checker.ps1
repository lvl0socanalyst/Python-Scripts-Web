$hostname = $env:COMPUTERNAME
$logFile = "$PSScriptRoot\persistence_log${hostname}.txt"

function Write-Log {
    param (
        [string]$text,
        [switch]$IsSuspicious
    )
    Add-Content -Path $logFile -Value $text

    if ($IsSuspicious) {
        Write-Host $text
    }
}

function Show-Menu {
    Write-Host "`n=== Windows Persistence Checker ==="
    Write-Host "1. Scan Registry Persistence Keys (Show suspicious only)"
    Write-Host "2. Scan Services Registry (Show suspicious only)"
    Write-Host "3. Scan Scheduled Tasks (Show suspicious only)"
    Write-Host "4. Scan Startup Folders (Show suspicious only)"
    Write-Host "5. Scan WMI Event Subscriptions"
    Write-Host "6. Exit"
}


function Is-SuspiciousPath {
    param ([string]$value)

    if (-not $value) { return $false }

    $indicators = @(
        "AppData", "Temp", "Roaming", "LocalLow", "Public", "Users\\Public",
        "\.vbs", "\.js", "\.bat", "\.cmd", "\.ps1", "\.scr",
        "wscript.exe", "cscript.exe", "powershell.exe", "mshta.exe", "rundll32.exe", "cmd.exe",
        "System32\\Tasks", "Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved",
        "curl.exe", "wget.exe",
        "base64", "Invoke-", "DownloadString", "EncodedCommand"
    )

    foreach ($indicator in $indicators) {
        if ($value -match [regex]::Escape($indicator)) {
            return $true
        }
    }
    return $false
}

function Scan-RegistryKeys {
    Write-Log "`n--- Scanning Registry Persistence Keys ---"

    $regPaths = @(
        "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
        "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce",
        "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run",
        "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce",
        "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options",
        "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon",
        "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components",
        "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows",
        "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify"
    )

    foreach ($path in $regPaths) {
        Write-Log "`n [Checking]: $path"

        try {
            if (Test-Path $path) {
                $items = Get-ItemProperty -Path $path -ErrorAction Stop
                $props = $items.PSObject.Properties | Where-Object { $_.Name -ne "PSPath" -and $_.Value }

                if ($props) {
                    foreach ($prop in $props) {
                        $isSuspicious = Is-SuspiciousPath $prop.Value
                        $logEntry = " -> $($prop.Name): $($prop.Value)"
                        if ($isSuspicious) {
                            Write-Log " [!!] Suspicious -> $($prop.Name): $($prop.Value)" -IsSuspicious
                        } else {
                            Add-Content -Path $logFile -Value $logEntry
                        }
                    }
                } else {
                    Write-Log " [Empty]"
                }
            }
        }
    }
}

function Scan-ServicesRegistry {
    Write-Log "`n--- Scanning Services Registry ---"
    $servicesPath = "HKLM:\SYSTEM\CurrentControlSet\Services"

    try {
        Get-ChildItem $servicesPath | ForEach-Object {
            $serviceName = $_.PSChildName
            $imagePath = (Get-ItemProperty -Path $_.PSPath -ErrorAction SilentlyContinue).ImagePath

            if ($imagePath) {
                $isSuspicious = Is-SuspiciousPath $imagePath
                $logEntry = " -> ${serviceName}: ${imagePath}"
                if ($isSuspicious) {
                    Write-Log " [!!] Suspicious -> ${serviceName}: ${imagePath}" -IsSuspicious
                } else {
                    Add-Content -Path $logFile -Value $logEntry
                }
            }
        }
    }
}

function Check-ScheduledTasks {
    Write-Log "`n--- Scanning Scheduled Tasks ---"

    $tasks = Get-ScheduledTask | Where-Object {$_.TaskPath -notlike '\Microsoft\*'}

    foreach ($task in $tasks) {
        $actions = ($task.Actions | ForEach-Object { $_.Execute + " " + $_.Arguments }) -join " "
        $fullEntry = "[$($task.TaskName)] $actions"

        $isSuspicious = Is-SuspiciousPath $actions
        if ($isSuspicious) {
            Write-Log " [!!] Suspicious Task -> $fullEntry" -IsSuspicious
        } else {
            Add-Content -Path $logFile -Value " -> $fullEntry"
        }
    }
}


function Scan-StartupFolders {
    Write-Log "`n--- Scanning Startup Folder ---"
    $startupPaths = @(
        "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup",
        "$env:ProgramData\Microsoft\Windows\Start Menu\Programs\Startup"
    )

    foreach ($path in $startupPaths) {
        Write-Log "`n [Checking]: $path"

        if (Test-Path $path) {
            Get-ChildItem -Path $path -Force | ForEach-Object {
                $itemPath = $_.FullName
                $isSuspicious = Is-SuspiciousPath $itemPath
                $logEntry = " -> $itemPath"

                if ($isSuspicious) {
                    Write-Log " [!!] Suspicious -> $itemPath" -IsSuspicious
                } else {
                    Add-Content -Path $logFile -Value $logEntry
                }
            }
        }
    }
}

function Scan-WMIEventSubscriptions {
    Write-Log "`n--- Scanning WMI Event Subscriptions ---"

    $classes = @(
        "__EventFilter",
        "__EventConsumer",
        "__FilterToConsumerBinding"
    )

    foreach ($class in $classes) {
        Write-Log "`n [Checking]: $class"

        $results = Get-WmiObject -Namespace root\subscription -Class $class -ErrorAction SilentlyContinue
        foreach ($entry in $results) {
            $entryText = $entry | Out-String
            $isSuspicious = Is-SuspiciousPath $entryText

            if ($isSuspicious) {
                Write-Log " [!!] Suspicious -> $entryText" -IsSuspicious
            } else {
                Add-Content -Path $logFile -Value $entryText
            }
        }
    }
}

do {
    Show-Menu
    $choice = Read-Host "Enter selection"

   switch ($choice) {
    "1" {
        Scan-RegistryKeys
        Write-Host "--- Review full output in txt ---"
        Pause
    }
    "2" {
        Scan-ServicesRegistry
        Write-Host "--- Review full output in txt ---"
        Pause
    }
    "3" {
        Check-ScheduledTasks
        Write-Host "--- Review full output in txt ---"
        Pause
    }
    "4" {
        Scan-StartupFolders
        Write-Host "--- Review full output in txt ---"
        Pause
    }
    "5" {
        Scan-WMIEventSubscriptions
        Write-Host "--- Review full output in txt ---"
        Pause
    }
    "6" {
        Write-Host "Exiting..."
        break
    }
   }
} while ($true)
